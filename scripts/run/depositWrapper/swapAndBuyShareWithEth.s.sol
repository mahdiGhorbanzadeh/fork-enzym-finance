

    // SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "forge-std/Script.sol";
import "forge-std/console.sol";
import "./../../../contracts/release/core/fund/comptroller/IComptroller.sol";
 
interface IDepositWrapper {
   
    function exchangeEthAndBuyShares(
        IComptroller _comptrollerProxy,
        uint256 _minSharesQuantity,
        address _exchange,
        address _exchangeApproveTarget,
        bytes calldata _exchangeData,
        uint256 _exchangeMinReceived
    ) external payable returns (uint256 sharesReceived_);

}

contract DepositWrapper is Script {

    address public constant depositWrapper = 0xD9a66FB08A0dB016B2478627a4aff7A9E313D07D;


    function run() external {
        
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        
        vm.startBroadcast(deployerPrivateKey);

        IDepositWrapper depositWrapperI = IDepositWrapper(depositWrapper);
   
        IComptroller comptrollerProxy = IComptroller(0x4026Eb6DC8f0e29A3bBf2142e4aB877Dbd57b4D5); // Cast the address to IComptroller
        uint256 minSharesQuantity = 3106; // Minimum shares expected
        address exchange = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57; // Exchange address (e.g., Paraswap)
        address exchangeApproveTarget = 0x216B4B4Ba9F3e719726886d34a177484278Bfcae; // Approval target
        bytes memory exchangeData = hex"54e3f31b000000000000000000000000000000000000000000000000000000000000002000000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000000000000be40000000000000000000000000000000000000000000000000000000000000c2200000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008d4adb2b0323fc6d4bcbb82e18f13426adcd067401000000000000000000000000000000000000000000000000000000000040320000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000006739dd86bb01e03edb0d4397abbc28d898a5e68400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000ed9e3f98bbed560e66b89aac922e29d4596a96420000000000000000000000000000000000000000000000000000000000000108a9059cbb000000000000000000000000ed9e3f98bbed560e66b89aac922e29d4596a9642000000000000000000000000000000000000000000000000000000e8d4a510007dc2038200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000e8d4a510000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000def171fe48cf0115b1d80b88dc8eab59176fee57000000000000000000000000d5b927956057075377263aab7f8afc12f85100dbncoded data
        uint256 exchangeMinReceived = 3044; // Minimum USDT expected


 


    depositWrapperI.exchangeEthAndBuyShares{
            value: 0.000001 ether 
        }(
       comptrollerProxy,minSharesQuantity,exchange,exchangeApproveTarget,exchangeData,exchangeMinReceived
        );

        vm.stopBroadcast();

    }
}
